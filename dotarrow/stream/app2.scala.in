/*
 * Copyright (c) 2023-2024 Sebastian I. Gliţa-Catina <gseba@users.sourceforge.net>
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * [Except as contained in this notice, the name of Sebastian I. Gliţa-Catina
 * shall not be used in advertising or otherwise to promote the sale, use
 * or other dealings in this Software without prior written authorization
 * from Sebastian I. Gliţa-Catina.]
 */

//> using dep org.scalameta:scalameta_2.13:4.9.5
//> using dep org.typelevel::cats-effect:3.6-0142603

import Double.NaN

import scala.annotation.tailrec

import scala.meta._
import dialects.Scala3

import cats.effect.{ IO, IOApp, ExitCode }


object App extends IOApp:

  private val app =


  val src: Source => Option[Source] = {
    case Source(it) =>
      sts(it).map(Source(_))
  }

  def sts: List[Stat] => Option[List[Stat]] = {
    case (pk: Pkg) :: it =>
      (pkg(pk) zip sts(it)).map(_ :: _)
    case (po: Pkg.Object) :: it =>
      (pko(po) zip sts(it)).map(_ :: _)
    case (im: Import) :: it =>
      sts(it).map(im :: _)
    case (ob: Defn.Object) :: it =>
      (obj(ob) zip sts(it)).map(_ :: _)
    case ls => Some(ls)
  }

  def pkg: Pkg => Option[Pkg] = {
    case Pkg(ref, it) =>
      sts(it).map(Pkg(ref, _))
  }

  def pko: Pkg.Object => Option[Pkg.Object] = {
    case po @ Pkg.Object(_, _, it) =>
      tmp(it).map { tm => po.copy(templ = tm) }
  }

  val obj: Defn.Object => Option[Defn.Object] = {
    case ob @ Defn.Object(Nil, _, it) =>
      tmp(it).map { tm => ob.copy(templ = tm) }
  }

  val tmp: Template => Option[Template] = {
    case my @ Template(Nil, List(Init(Type.Select(Term.Name("IOApp"), Type.Name("Simple")), Name.Anonymous(), Nil)), _, (df: Defn.Def) :: it) =>
      io.dfn(df).map { io_df => my.copy(stats = io_df :: it) }
    case tm => Some(tm)
  }

  override def run(_args: List[String]): IO[ExitCode] =
    IO(src(app))
      .map(_.map(println(_)).nonEmpty)
      .ifM(IO.pure(ExitCode.Success), IO.pure(ExitCode.Error))


private object io:

  val dfn: Defn.Def => Option[Defn.Def] = {
    case my @ Defn.Def(List(Mod.Override()), Term.Name("run"), Nil, _, Some(Type.Apply(Type.Name("IO"), List(Type.Name("Unit")))), Term.Block(ls)) =>
      st2(ls).flatMap { it => f_y(it).map { fy => my.copy(body = fy) } }
    case _ => None
  }

  @tailrec
  def st2(ls: List[Stat]): Option[Term.ForYield] = ls match {
    case (it: Term.ForYield) :: Nil => Some(it)
    case Nil => None
    case _ :: it => st2(it)
  }

  private val f_y: Term.ForYield => Option[Term.ForYield] = {
    case my @ Term.ForYield(it, Lit.Unit()) =>
      enu(it).map { ls => my.copy(enums = ls) }
  }

  @tailrec
  private def enu(ls: List[Enumerator]): Option[List[Enumerator]] = ls match {
    case Enumerator.Generator(Pat.Wildcard(), Term.Apply(Term.Name("IO"), _))
      :: Enumerator.Generator(Pat.Typed(Pat.Var(Term.Name(`name`)), Type.Name(`tpe`)),
                              Term.Apply(Term.Name("IO"), _))
      :: it => en2(it)
    case Nil => None
    case _ :: it => enu(it)
  }

  @tailrec
  private def en2(ls: List[Enumerator]): Option[List[Enumerator]] = ls match {
    case Enumerator.Generator(Pat.Wildcard(),
                              Term.Apply(Term.Name("IO"),
                                         List(Term.Block(List(Term.Apply(Term.Select(Term.Select(Term.Select(Term.Select(Term.Name("_root_"), Term.Name("scala")), Term.Name("Console")), Term.Name("err")), Term.Name("println")), List(Lit.String(`name_tpe`))), _*)))))
      :: Enumerator.Generator(Pat.Wildcard(),
                              Term.Select(Term.Name("IO"), Term.Name("canceled")))
      :: it => Some(it)
    case Nil => None
    case _ :: it => en2(it)
  }

  private val name: String = 

  private val tpe: String = 

  private val name_tpe = name + ' ' + tpe
