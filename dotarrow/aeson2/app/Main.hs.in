module Main where

import Language.Haskell.Meta.Parse
import Language.Haskell.TH.Ppr
import Language.Haskell.TH.Syntax

import Control.Monad (when)
import Data.Maybe
import System.Environment
import System.Exit (exitSuccess, exitFailure)


sig :: Dec -> Maybe Dec
sig s@(SigD (Name (OccName "main") _)
            (AppT (ConT (Name (OccName "IO") _))
                  (ConT (Name (OccName "()") _)))) = Just s
sig _ = Nothing

val :: Dec -> Maybe Dec
val v@(ValD m@(VarP (Name (OccName "main") _))
              (NormalB (DoE Nothing ss)) []) | isEachSimple && isReturnLast = v'
    where isEachSimple = all (isJust . stmt) ss
          isReturnLast | null ss   = False
                       | otherwise = case stmt (last ss)
                                     of Just (_, Return) -> True
                                        _                -> False
          v' = (\it -> ValD m (NormalB (DoE Nothing it)) []) <$> stmt' (
                                                                       ) ss
val _ = Nothing

stmt' :: String -> [Stmt] -> Maybe [Stmt]
stmt' name_tpe (BindS _ _
               :LetS _
               :BindS (SigP (VarP (Name (OccName name') _))
                            (ConT (Name (OccName tpe') _))) _
               :it
               )
    | name_tpe == name' ++ " " ++ tpe'
    = stmt'' (name', tpe') it
stmt' _ [] = Nothing
stmt' nt (_:it) = stmt' nt it

stmt'' :: (String, String) -> [Stmt] -> Maybe [Stmt]
stmt'' (n', t') (NoBindS (AppE (AppE (VarE (Name (OccName "hPutStrLn") _)) (VarE (Name (OccName "stderr") _)))
                               (ParensE (UInfixE (LitE (StringL n'')) (VarE (Name (OccName "++") _))
                                                 (UInfixE (LitE (StringL " ")) (VarE (Name (OccName "++") _))
                                                          (LitE (StringL t''))))))
                :LetS _
                :NoBindS _
                :NoBindS (VarE (Name (OccName "exitFailure") _))
                :it
                )
    | n' == n'' && t' == t'' = Just it
stmt'' _ [] = Nothing
stmt'' nt (_:it) = stmt'' nt it

data StmtT = Bind
           | Print
           | Return
           | Ignore

stmt :: Stmt -> Maybe (Stmt, StmtT)
stmt s@(BindS (SigP (VarP _) (ConT _))
              (AppE (VarE (Name (OccName "pure") _)) _)) = Just (s, Bind)
stmt s@(BindS (SigP (VarP (Name (OccName _) _)) (ConT (Name (OccName "()") _)))
              (AppE (VarE (Name (OccName "print") _)) _)) = Just (s, Print)
stmt s@(NoBindS (AppE (VarE (Name (OccName "print") _)) _)) = Just (s, Print)
stmt s@(NoBindS (AppE (VarE (Name (OccName "return") _)) (ConE (Name (OccName "()") _)))) = Just (s, Return)
stmt s@(BindS _ _) = Just (s, Ignore)
stmt s@(LetS _) = Just (s, Ignore)
stmt s@(NoBindS _) = Just (s,  Ignore)
stmt _ = Nothing

main :: IO ()
main = do
    args <- getArgs
    src <- readFile (head args)
    let Right decs = parseDecs src
    let val' = val (last decs)
    when (length decs >= 2 && isJust (sig (last (init decs))) && isJust val') $ do
        let app = ppr (init decs ++ [fromJust val'])
        print app
        exitSuccess
    exitFailure
