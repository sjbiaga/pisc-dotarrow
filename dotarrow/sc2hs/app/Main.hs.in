{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE LambdaCase #-}
module Main where

import Control.Monad (replicateM)
import Data.ByteString.Lazy.Char8 (unpack)
import Data.Foldable (traverse_)
import Data.List (intercalate)
import Language.Haskell.Interpreter
import Language.Haskell.TH.Syntax
import System.Process.Typed
import System.Random

import HaScalaM.Tree
import HaScalaM.Instances.Show

source =


amm :: MonadInterpreter mi => String -> mi String
amm exp = do
          (out, _) <- readProcess_ (proc "amm" ["-c", i ++ i2 ++ pr])
          return (unpack out)
    where i = "import $ivy.`org.scalameta:scalameta_2.13:4.9.6`;"
          i2 = "import scala.meta._; import dialects.Scala3;"
          pr = "print(" ++ exp ++ ")"

rnd :: Int -> String
rnd s = take 10 $ randomRs ('a','z') (mkStdGen s)

src :: ( s ~ SmStat
       , MonadInterpreter mi ) => SmSource s -> mi ()
src (SmSource ((SImpExp (SmImportS [io])) : it)
    ) = imp io >> traverse_ stm it
src _ = pure ()

stm :: ( s ~ SmStat
       , MonadInterpreter mi
       ) => s -> mi ()
stm (SObject (SmObjectS [] (SmNameT "App") it)) = app it
stm (SClass (SmClassS [MMod SmCaseM]
                      (SmNameT' name)
                      (SmParamClauseT' [])
                      (SmCtorPrimary []
                                     (NName SmAnonymousN)
                                     [SmParamClauseT ps Nothing])
                      (SmTemplate [] [] (SmSelf (NName SmAnonymousN) Nothing) [] []))
    ) = ppr ("DataD [] " ++ name' ++ " [] Nothing [RecC " ++ name' ++ " [" ++ ps' ++ "]] []")
    where name' = "(Name (OccName \"" ++ name ++ "\") NameS)"
          ps' = intercalate "," (map prm ps)
stm _ = error "stm"

prm :: p ~ SmParamT m n t' t => p -> String
prm (SmParamT []
              (NTName (SmNameT name))
              (Just (T'Ref (RT'Name (SmNameT' type'))))
              Nothing
    ) = "(Name (OccName \"" ++ name ++ "\") NameS" ++
        ",Bang NoSourceUnpackedness NoSourceStrictness" ++
        ",ConT (Name (OccName \"" ++ type' ++ "\") NameS))"
prm _ = error "prm"

imp :: ( r ~ SmRef
       , i ~ SmImportee
       , MonadInterpreter mi
       ) => SmImporter r i -> mi ()
imp (SmImporter (RTSelect (SmSelectRT (TRef (RTName (SmNameT "cats"))) (SmNameT "effect")))
                [SmNameI (NName (SmIndeterminateN "IO"))
                ,SmNameI (NName (SmIndeterminateN "IOApp"))
                ]
    ) = pure ()
imp _ = error "imp"

app :: ( i ~ SmInit m n t' t ac
       , s ~ SmStat
       , p ~ SmSelf n t'
       , MonadInterpreter mi
       ) => SmTemplate m n t' t ac i p s -> mi ()
app (SmTemplate [] [SmInit (T'Ref (RT'Ref (SmSelectRT' (RTName (SmNameT "IOApp"))
                                                       (SmNameT' "Simple"))))
                           (NName SmAnonymousN) []
                   ]
                (SmSelf (NName SmAnonymousN) Nothing)
                [SDef run] []) = def run
app _ = error "app"

def :: ( m ~ SmMod
       , n ~ SmName
       , t' ~ SmType'
       , t ~ SmTerm
       , tn ~ SmNameT
       , g ~ SmParamClauseGroup m n p p' t' b' t pc pc'
       , MonadInterpreter mi
       ) => SmDefS m n tn p p' t' b' t pc pc' g -> mi ()
def (SmDefS [MMod SmOverrideM] (SmNameT "run") []
            (Just (T'Apply (SmApplyT' (T'Ref (RT'Name (SmNameT' "IO")))
                                      (SmArgClauseT' [T'Ref (RT'Name (SmNameT' "Unit"))]))))
            (TForYield it)
    ) = do
        ppr ("SigD (Name (OccName \"main\") NameS)" ++
                  "(AppT (ConT (Name (OccName \"IO\") NameS)) (TupleT 0))")
        for it
def _ = error "def"

for ::  ( e ~ SmEnumerator
        , t ~ SmTerm
        , MonadInterpreter mi
        ) => SmForYieldT e t -> mi ()
for (SmForYieldT it (TLit SmUnitL)) = gs'
    where gs = foldl (\r e -> r >>= (\(_, i) -> case e
                                                of EGenerator g -> do t <- gen g
                                                                      if i + 1 == length it
                                                                      then
                                                                          case t
                                                                          of IOvoid -> pure (t, -1)
                                                                             _      -> pure (IOerror, -1)
                                                                      else
                                                                          pure (t, i + 1)
                                                   EVal v       -> do t <- val v
                                                                      if i + 1 == length it
                                                                      then
                                                                          pure (IOerror, -1)
                                                                      else
                                                                          pure (t, i + 1)
                                                   _            -> undefined))
                     (pure (IOerror, 0)) it
          gs' = gs >>= (\case (IOerror, _) -> error "for"
                              _            -> pure ()
                       )

data GeneratorType = IOerror
                   | IObind
                   | IOprintln
                   | IOvoid
                   | IOignore

bnd :: MonadInterpreter mi => String -> String -> mi ()
bnd name = runStmt . ((name ++ "<- [| pure (") ++) . (++ ") |]")

bnd' :: MonadInterpreter mi => String -> String -> mi ()
bnd' name = runStmt . ((name ++ "<- [| ") ++) . (++ " |]")

ppr :: MonadInterpreter mi => String -> mi ()
ppr = runStmt . ("ppr (" ++) . (++ ")")

gen :: ( p ~ SmPat
       , t ~ SmTerm
       , MonadInterpreter mi
       ) => SmGeneratorE p t -> mi GeneratorType
gen (SmGeneratorE (PPat (SmTypedP (PVar (SmVarP (SmNameT name))) (T'Ref (RT'Name (SmNameT' "Unit")))))
                  (TApply (SmApplyT (TRef (RTName (SmNameT "IO")))
                                    (SmArgClauseT [TBlock (SmBlockT [STerm (TApply (SmApplyT (TRef (RTName (SmNameT "println")))
                                                                                             (SmArgClauseT [expr] Nothing)))
                                                                    ])
                                                  ] Nothing)))
    ) = do
        s <- randomIO
        let r = rnd s
        let Name (OccName name') _ = mkName r
        expr' <- amm (show expr)
        bnd' name' expr'
        ppr ("(BindS (SigP (VarP (Name (OccName \"" ++ name ++ "\") NameS)) " ++
                          "(ConT (Name (OccName \"()\") NameS))) " ++
                    "(AppE (VarE (Name (OccName \"print\") NameS)) " ++
                           name' ++
                    ")" ++
             ")")
        return IOprintln
gen (SmGeneratorE (PVar (SmVarP (SmNameT name)))
                  (TApply (SmApplyT (TRef (RTName (SmNameT "IO")))
                                    (SmArgClauseT [TBlock (SmBlockT [STerm (TApply (SmApplyT (TRef (RTName (SmNameT name')))
                                                                                             (SmArgClauseT expr' Nothing)))
                                                                    ])
                                                  ] Nothing)))
    ) = do
        s'' <- replicateM n randomIO
        expr'' <- traverse (amm . show) expr'
        let name'' = [ name' | s <- s'', let Name (OccName name') _ = mkName (rnd s) ]
        traverse_ (uncurry bnd') (zip name'' expr'')
        ppr ("(BindS (VarP (Name (OccName \"" ++ name ++ "\") NameS)) " ++
                    "(UInfixE (VarE (Name (OccName \"pure\") NameS)) " ++
                             "(VarE (Name (OccName \"$\") NameS)) " ++
                              concat (replicate n "(AppE ") ++
                                                  "(ConE (Name (OccName \"" ++ name' ++ "\") NameS)) " ++
                                                  concatMap (++")") name'' ++
                    ")" ++
             ")")
        return IOignore
    where n = length expr'
gen (SmGeneratorE (PPat (SmTypedP (PVar (SmVarP (SmNameT name)))
                                  (T'Ref (RT'Name (SmNameT' type')))))
                  (TApply (SmApplyT (TRef (RTName (SmNameT "IO")))
                                    (SmArgClauseT [TBlock (SmBlockT [expr])] Nothing)))
    ) = do
        s <- randomIO
        let r = rnd s
        let Name (OccName name') _ = mkName r
        expr' <- amm (show expr)
        bnd name' expr'
        ppr ("(BindS (SigP (VarP (Name (OccName \"" ++ name ++ "\") NameS)) " ++
                          "(ConT (Name (OccName \"" ++ type' ++ "\") NameS))) " ++
                     name' ++
             ")")
        return IObind
gen (SmGeneratorE (PPat SmWildcardP)
                  (TRef (RTSelect (SmSelectRT (TApply (SmApplyT (TRef (RTName (SmNameT "IO")))
                                                                (SmArgClauseT [TBlock (SmBlockT [])] Nothing)))
                                              (SmNameT "void"))))
    ) = ppr ("(NoBindS (AppE (VarE (Name (OccName \"return\") NameS)) " ++
                            "(ConE (Name (OccName \"()\") NameS)))" ++
             ")")
    >>  pure IOvoid
gen _ = error "gen"

val :: ( p ~ SmPat
       , t ~ SmTerm
       , MonadInterpreter mi
       ) => SmValE p t -> mi GeneratorType
val (SmValE (PExtract (SmExtractP (TRef (RTName (SmNameT name')))
                                  (SmArgClauseP ps)))
            (TRef (RTName (SmNameT name)))
    ) = do
        ppr ("LetS [ValD (ConP (Name (OccName \"" ++ name' ++ "\") NameS) [] [" ++ name'' ++ "]) "++
                        "(NormalB (VarE (Name (OccName \"" ++ name ++ "\") NameS))) []" ++
                  "]"
            )
        return IOignore
    where var (PVar (SmVarP (SmNameT name))) = name
          name'' = intercalate "," (map (("VarP (Name (OccName \"" ++) . (++ "\") NameS)") . var) ps)
val _ = error "val"


main :: IO ()
main = do
  _ <- runInterpreter
     $ setImports ["Prelude", "Language.Haskell.TH.Syntax", "Language.Haskell.TH.Ppr", "System.IO"]
    >> set [languageExtensions := [Language.Haskell.Interpreter.TemplateHaskell]]
    >> src source
    >> runStmt "hFlush stdout"
  return ()
