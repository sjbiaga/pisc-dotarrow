# -*- indent-tabs-mode: nil; -*-

@import scala.sys.process._

@given Conversion[`()`, Option[String]] = _.as[Option[String]]

@val bsh: String => String = _.replaceAll("(['`\"\\\\$])", "\\\\$1")

@def cli(src: String)(args: String*) = s"""scala-cli compile "$src" &>/dev/null; \
                                           scala-cli run "$src" -q -O -nowarn -S 3.5.0-RC1 -- """ + args.mkString(" ")

@val tmp: String = "sh -c 'mktemp -up dotarrow'" .!! .stripTrailing .stripPrefix("dotarrow/")

#############
# ex3.scala #
#############

@val _ = s"""sh -c 'cp ../dotarrow/stream/bin.in dotarrow/tmp/"${tmp}_ex3.scala.bin"'""" .!
@val _ = s"""sh -c 'touch dotarrow/tmp/"${tmp}_ex3.scala.txt"'""" .!

@val ex3: Option[String] = Some("""sh -c 'cat "dotarrow/ex3.scala"'""" .!!)

@val run_ex3: Option[String] => IO[Option[String]] = { it => IO.pure(it.flatMap { src =>                       \
  if 0 == s"""sh -c 'echo -n "${bsh(src)}" | sed -e "s/\\\\\\\\'/'/g"                                          \
                                          >| "dotarrow/${tmp}_ex3.scala"'""" .!                                \
  && 0 == s"""sh -c '${cli("../dotarrow/source.scala")(s"dotarrow/${tmp}_ex3.scala")}'""" .!                   \
  && 0 == s"""sh -c 'dotarrowStream "${tmp}_ex3.scala"'""" .!                                                  \
  && 0 == s"""sh -c 'mv dotarrow/tmp/"${tmp}_ex3.scala.tmp" dotarrow/"${tmp}_ex3.scala"'""" .!                 \
  && 0 == s"""sh -c 'rm dotarrow/src/"${tmp}_ex3.scala.src" &>/dev/null'""" .!                                 \
  then {                                                                                                       \
    val out = s"""sh -c '${cli(s"dotarrow/${tmp}_ex3.scala")()}'""" .lazyLines_!                              ;\
    if out.nonEmpty                                                                                            \
    then {                                                                                                     \
      val src = "//> using dep org.typelevel::cats-effect:3.6-0142603\n" + out.mkString("\n")                 ;\
      if 0 == s"""sh -c 'echo -n "${bsh(src)}" | sed -e "s/\\\\\\\\'/'/g"                                      \
                                              >| "dotarrow/${tmp}_ex3.scala"'""" .!                            \
      && 0 == s"""sh -c '${cli(s"dotarrow/${tmp}_ex3.scala")()} 3>&1 1>&2- 2>&3- | sed -e "s/[ ]/\\\\\\\\ /g"  \
                                                                >> "dotarrow/tmp/${tmp}_ex3.scala.txt"'""" .!  \
      && 0 == s"""sh -c '${cli("../dotarrow/source.scala")(s"dotarrow/${tmp}_ex3.scala")}'""" .!               \
      && 0 == s"""sh -c 'dotarrowStream2 "${tmp}_ex3.scala"'""" .!                                             \
      && 0 == s"""sh -c 'mv dotarrow/tmp/"${tmp}_ex3.scala.tmp" dotarrow/"${tmp}_ex3.scala"'""" .!             \
      && 0 == s"""sh -c 'rm dotarrow/src/"${tmp}_ex3.scala.src"' &>/dev/null""" .!                             \
      then {                                                                                                   \
        Some(s"""sh -c '${cli(s"dotarrow/${tmp}_ex3.scala")()}'""" .!!)                                       ;\
      } else                                                                                                   \
        None                                                                                                   \
    } else                                                                                                     \
      None                                                                                                     \
  } else                                                                                                       \
    None                                                                                                       \
})}

Node1 = ŒΩ(ch) ( ùüé                                                   \
              | ( ùüé                                                 \
                | !.ch(code)/* run_ex3 */.                          \
                    if /* 'code.nonEmpty */ = True                  \
                    then œÑ /* println(s"Node1:\n${'code.get}") */.  \
                         ch<code>.                                  \
                    else ch<>.                                      \
                )                                                   \
              | œÑ /* println(s"Node1:\n${ex3.get}") */.             \
                ch</*ex3*/>.                                        \
              )

#############
# ex4.scala #
#############

@val _ = s"""sh -c 'echo "{}" >| dotarrow/tmp/"$tmp.json"'""" .!
@val _ = s"""sh -c 'touch dotarrow/tmp/"$tmp.txt"'""" .!

@val ex4: Option[String] = Some("""sh -c 'cat "dotarrow/ex4.scala"'""" .!!)

@val run_ex4: Option[String] => IO[Option[String]] = { it => IO.pure(it.flatMap { src =>                 \
  if 0 == s"""sh -c 'echo -n "${bsh(src)}" | sed -e "s/\\\\\\\\'/'/g"                                    \
                                          >| "dotarrow/$tmp.scala"'""" .!                                \
  && 0 == s"""sh -c '${cli("../dotarrow/source.scala")(s"dotarrow/$tmp.scala")}'""" .!                   \
  && 0 == s"""sh -c 'dotarrowCirce "$tmp"'""" .!                                                         \
  then {                                                                                                 \
    val out = s"""sh -c '${cli(s"dotarrow/$tmp.scala")()}'""" .lazyLines_!                              ;\
    if out.nonEmpty                                                                                      \
    then {                                                                                               \
      val src = "//> using dep org.typelevel::cats-effect:3.6-0142603\n" +                               \
                "//> using dep io.circe::circe-generic:0.15.0-M1\n" +                                    \
                "//> using dep io.circe::circe-parser:0.15.0-M1\n" +                                     \
                out.mkString("\n")                                                                      ;\
      if 0 == s"""sh -c 'echo -n "${bsh(src)}" | sed -e "s/\\\\\\\\'/'/g"                                \
                                              >| "dotarrow/$tmp.scala"'""" .!                            \
      && 0 == s"""sh -c '${cli(s"dotarrow/$tmp.scala")()} 3>&1 1>&2- 2>&3- | sed -e "s/[ ]/\\\\\\\\ /g"  \
                                                          >> "dotarrow/tmp/$tmp.txt"'""" .!              \
      && 0 == s"""sh -c '${cli("../dotarrow/source.scala")(s"dotarrow/$tmp.scala")}'""" .!               \
      && 0 == s"""sh -c 'dotarrowCirce2 "$tmp"'""" .!                                                    \
      then {                                                                                             \
        Some(s"""sh -c '${cli(s"dotarrow/$tmp.scala")()}'""" .!!)                                       ;\
      } else                                                                                             \
        None                                                                                             \
    } else                                                                                               \
      None                                                                                               \
  } else                                                                                                 \
    None                                                                                                 \
})}

Node2 = ŒΩ(ch)ŒΩ(lnk) ( ùüé | Node3(ch) | Node4(ch, lnk) )

Node3(ch) = œÑ /* println(s"Node3:\n${ex4.get}") */. ch</*ex4*/>.

Node4(ch, lnk) = ch(code)/* run_ex4 */.                     \
                 [/* 'code.nonEmpty */ = True]              \
                 œÑ /* println(s"Node4:\n${'code.get}") */.  \
                 ( ùüé                                        \
                 | lnk<ch>. ch<code>.                       \
                 | Node5(lnk)                               \
                 )

Node5(lnk) = lnk(ch).                                   \
             ch(code)/* run_ex4 */.                     \
             [/* 'code.nonEmpty */ = True]              \
             œÑ /* println(s"Node5:\n${'code.get}") */.  \
             ŒΩ(ch2)ŒΩ(lnk2) ( ùüé                          \
                           | ch2<code>.                 \
                           | Node4(ch2, lnk2)           \
                           )

###############
# ex3&4.scala #
###############

Main = Node1 | Node2
