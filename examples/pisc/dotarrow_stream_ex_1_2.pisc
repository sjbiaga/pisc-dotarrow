# -*- indent-tabs-mode: nil; -*-

@import scala.sys.process._

@given Conversion[`()`, Option[String]] = _.as[Option[String]]

@val bsh: String => String = _.replaceAll("(['`\"\\\\$])", "\\\\$1")

@def cli(src: String)(args: String*) = s"""scala-cli compile "$src" &>/dev/null; \
                                           scala-cli run "$src" -q -O -nowarn -S 3.5.0-RC1 -- """ + args.mkString(" ")

@val tmp: String = "sh -c 'mktemp -up dotarrow'" .!! .stripTrailing .stripPrefix("dotarrow/")

#############
# ex1.scala #
#############

@val _ = s"""sh -c 'cp ../dotarrow/stream/bin.in dotarrow/tmp/"${tmp}_ex1.scala.bin"'""" .!
@val _ = s"""sh -c 'touch dotarrow/tmp/"${tmp}_ex1.scala.txt"'""" .!

@val ex1: Option[String] = Some("""sh -c 'cat "dotarrow/ex1.scala"'""" .!!)

@val run_ex1: Option[String] => IO[Option[String]] = { it => IO.pure(it.flatMap { src =>                       \
  if 0 == s"""sh -c 'echo -n "${bsh(src)}" | sed -e "s/\\\\\\\\'/'/g"                                          \
                                          >| "dotarrow/${tmp}_ex1.scala"'""" .!                                \
  && 0 == s"""sh -c '${cli("../dotarrow/source.scala")(s"dotarrow/${tmp}_ex1.scala")}'""" .!                   \
  && 0 == s"""sh -c 'dotarrowStream "${tmp}_ex1.scala"'""" .!                                                  \
  && 0 == s"""sh -c 'mv dotarrow/tmp/"${tmp}_ex1.scala.tmp" dotarrow/"${tmp}_ex1.scala"'""" .!                 \
  && 0 == s"""sh -c 'rm dotarrow/src/"${tmp}_ex1.scala.src" &>/dev/null'""" .!                                 \
  then {                                                                                                       \
    val out = s"""sh -c '${cli(s"dotarrow/${tmp}_ex1.scala")()}'""" .lazyLines_!                              ;\
    if out.nonEmpty                                                                                            \
    then {                                                                                                     \
      val src = "//> using dep org.typelevel::cats-effect:3.6-0142603\n" + out.mkString("\n")                 ;\
      if 0 == s"""sh -c 'echo -n "${bsh(src)}" | sed -e "s/\\\\\\\\'/'/g"                                      \
                                              >| "dotarrow/${tmp}_ex1.scala"'""" .!                            \
      && 0 == s"""sh -c '${cli(s"dotarrow/${tmp}_ex1.scala")()} 3>&1 1>&2- 2>&3- | sed -e "s/[ ]/\\\\\\\\ /g"  \
                                                                >> "dotarrow/tmp/${tmp}_ex1.scala.txt"'""" .!  \
      && 0 == s"""sh -c '${cli("../dotarrow/source.scala")(s"dotarrow/${tmp}_ex1.scala")}'""" .!               \
      && 0 == s"""sh -c 'dotarrowStream2 "${tmp}_ex1.scala"'""" .!                                             \
      && 0 == s"""sh -c 'mv dotarrow/tmp/"${tmp}_ex1.scala.tmp" dotarrow/"${tmp}_ex1.scala"'""" .!             \
      && 0 == s"""sh -c 'rm dotarrow/src/"${tmp}_ex1.scala.src"' &>/dev/null""" .!                             \
      then {                                                                                                   \
        Some(s"""sh -c '${cli(s"dotarrow/${tmp}_ex1.scala")()}'""" .!!)                                       ;\
      } else                                                                                                   \
        None                                                                                                   \
    } else                                                                                                     \
      None                                                                                                     \
  } else                                                                                                       \
    None                                                                                                       \
})}

Node1 = ν(ch) (                                                   \
              ( !.ch(code)/* run_ex1 */.                          \
                  if /* 'code.nonEmpty */ = True                  \
                  then τ /* println(s"Node1:\n${'code.get}") */.  \
                       ch<code>.                                  \
                  else ch<>.                                      \
              )                                                   \
              | τ /* println(s"Node1:\n${ex1.get}") */.           \
                ch</*ex1*/>.                                      \
              )

#############
# ex2.scala #
#############

@val _ = s"""sh -c 'cp ../dotarrow/stream/bin.in dotarrow/tmp/"${tmp}_ex2.scala.bin"'""" .!
@val _ = s"""sh -c 'touch dotarrow/tmp/"${tmp}_ex2.scala.txt"'""" .!

@val ex2: Option[String] = Some("""sh -c 'cat "dotarrow/ex2.scala"'""" .!!)

@val run_ex2: Option[String] => IO[Option[String]] = { it => IO.pure(it.flatMap { src =>                       \
  if 0 == s"""sh -c 'echo -n "${bsh(src)}" >| "dotarrow/${tmp}_ex2.scala"'""" .!                               \
  && 0 == s"""sh -c '${cli("../dotarrow/source.scala")(s"dotarrow/${tmp}_ex2.scala")}'""" .!                   \
  && 0 == s"""sh -c 'dotarrowStream "${tmp}_ex2.scala"'""" .!                                                  \
  && 0 == s"""sh -c 'mv dotarrow/tmp/"${tmp}_ex2.scala.tmp" dotarrow/"${tmp}_ex2.scala"'""" .!                 \
  && 0 == s"""sh -c 'rm dotarrow/src/"${tmp}_ex2.scala.src" &>/dev/null'""" .!                                 \
  then {                                                                                                       \
    val out = s"""sh -c '${cli(s"dotarrow/${tmp}_ex2.scala")()}'""" .lazyLines_!                              ;\
    if out.nonEmpty                                                                                            \
    then {                                                                                                     \
      val src = "//> using dep org.typelevel::cats-effect:3.6-0142603\n" + out.mkString("\n")                 ;\
      if 0 == s"""sh -c 'echo -n "${bsh(src)}" >| "dotarrow/${tmp}_ex2.scala"'""" .!                           \
      && 0 == s"""sh -c '${cli(s"dotarrow/${tmp}_ex2.scala")()} 3>&1 1>&2- 2>&3- | sed -e "s/[ ]/\\\\\\\\ /g"  \
                                                                >> "dotarrow/tmp/${tmp}_ex2.scala.txt"'""" .!  \
      && 0 == s"""sh -c '${cli("../dotarrow/source.scala")(s"dotarrow/${tmp}_ex2.scala")}'""" .!               \
      && 0 == s"""sh -c 'dotarrowStream2 "${tmp}_ex2.scala"'""" .!                                             \
      && 0 == s"""sh -c 'mv dotarrow/tmp/"${tmp}_ex2.scala.tmp" dotarrow/"${tmp}_ex2.scala"'""" .!             \
      && 0 == s"""sh -c 'rm dotarrow/src/"${tmp}_ex2.scala.src"' &>/dev/null""" .!                             \
      then {                                                                                                   \
        Some(s"""sh -c '${cli(s"dotarrow/${tmp}_ex2.scala")()}'""" .!!)                                       ;\
      } else                                                                                                   \
        None                                                                                                   \
    } else                                                                                                     \
      None                                                                                                     \
  } else                                                                                                       \
    None                                                                                                       \
})}

Node2 = ν(ch)ν(lnk) ( Node3(ch) | Node4(ch, lnk) )

Node3(ch) = τ /* println(s"Node3:\n${ex2.get}") */. ch</*ex2*/>.

Node4(ch, lnk) = ch(code)/* run_ex2 */.                     \
                 [/* 'code.nonEmpty */ = True]              \
                 τ /* println(s"Node4:\n${'code.get}") */.  \
                 ( lnk<ch>. ch<code>.                       \
                 | Node5(lnk)                               \
                 )

Node5(lnk) = lnk(ch).                                   \
             ch(code)/* run_ex2 */.                     \
             [/* 'code.nonEmpty */ = True]              \
             τ /* println(s"Node5:\n${'code.get}") */.  \
             ν(ch2)ν(lnk2) ( ch2<code>.                 \
                           | Node4(ch2, lnk2)           \
                           )

###############
# ex1&2.scala #
###############

Main = Node1 | Node2
