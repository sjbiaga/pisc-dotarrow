# -*- indent-tabs-mode: nil; -*-

@import scala.sys.process._

@given Conversion[`()`, Option[String]] = _.as[Option[String]]

@val bsh: String => String = _.replaceAll("([`\"\\\\$])", "\\\\$1")

@def cli(src: String)(args: String*) = s"""scala-cli compile "$src" &>/dev/null; \
                                           scala-cli run "$src" -q -O -nowarn -S 3.5.0-RC1 -- """ + args.mkString(" ")

@val tmp: String = "sh -c 'mktemp -up dotarrow'" .!! .stripTrailing .stripPrefix("dotarrow/")

@var ex: Option[String] = None

@val run: Option[String] => IO[Option[String]] = { it => IO.pure(it.flatMap { src =>                     \
  if 0 == s"""sh -c 'echo -n "${bsh(src)}" >| "dotarrow/$tmp.scala"'""" .!                               \
  && 0 == s"""sh -c '${cli("../dotarrow/source.scala")(s"dotarrow/$tmp.scala")}'""" .!                   \
  && 0 == s"""sh -c 'dotarrowCirce "$tmp" codec/list'""" .!                                              \
  then {                                                                                                 \
    val out = s"""sh -c '${cli(s"dotarrow/$tmp.scala")()}'""" .lazyLines_!                              ;\
    if out.nonEmpty                                                                                      \
    then {                                                                                               \
      val src = "//> using dep org.typelevel::cats-effect:3.6-0142603\n" +                               \
                "//> using dep io.circe::circe-generic:0.15.0-M1\n" +                                    \
                "//> using dep io.circe::circe-parser:0.15.0-M1\n" +                                     \
                out.mkString("\n")                                                                      ;\
      if 0 == s"""sh -c 'echo -n "${bsh(src)}" >| "dotarrow/$tmp.scala"'""" .!                           \
      && 0 == s"""sh -c '${cli(s"dotarrow/$tmp.scala")()} 3>&1 1>&2- 2>&3- | sed -e "s/[ ]/\\\\\\\\ /g"  \
                                                          >> "dotarrow/tmp/$tmp.txt"'""" .!              \
      && 0 == s"""sh -c '${cli("../dotarrow/source.scala")(s"dotarrow/$tmp.scala")}'""" .!               \
      && 0 == s"""sh -c 'dotarrowCirce2 "$tmp" codec/list'""" .!                                         \
      then {                                                                                             \
        Some(s"""sh -c '${cli(s"dotarrow/$tmp.scala")()}'""" .!!)                                       ;\
      } else                                                                                             \
        None                                                                                             \
    } else                                                                                               \
      None                                                                                               \
  } else                                                                                                 \
    None                                                                                                 \
})}

Init(src, ch) = œÑ /* println(src) */. ch</* Some(src.as[String]) */>.

Main = œÑ /* s"""sh -c 'echo "{}" >| dotarrow/tmp/"$tmp.json"'""" .! */.            \
       œÑ /* s"""sh -c 'touch dotarrow/tmp/"$tmp.txt"'""" .! */.                    \
       ŒΩ(ch) ( ùüé                                                                   \
             | ( ùüé                                                                 \
               | !.ch(code)/* run */.                                              \
                   if /* 'code.nonEmpty */ = True                                  \
                   then œÑ /* println('code.get) */. ch<code>.                      \
                   else ch<>.                                                      \
               )                                                                   \
             | Init(/* s"""sh -c 'cat "dotarrow/${args(0)}.scala"'""" .!! */, ch)  \
             )
