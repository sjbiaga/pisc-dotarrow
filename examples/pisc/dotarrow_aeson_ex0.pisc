# -*- indent-tabs-mode: nil; -*-

@import scala.sys.process._

@given Conversion[`()`, Option[String]] = _.as[Option[String]]

@val bsh: String => String = _.replaceAll("(['`\"\\\\$])", "\\\\$1")

@val tmp: String = "sh -c 'mktemp -up dotarrow'" .!! .stripTrailing .stripPrefix("dotarrow/")

@val cwd: String = s"""sh -c 'readlink -m dotarrow/tmp/$tmp'""" .!! .stripTrailing

@var ex: Option[String] = None

@val run: Option[String] => IO[Option[String]] = { it => IO.pure(it.flatMap { src =>  \
  if 0 == s"""sh -c 'echo -n "${bsh(src)}" | sed -e "s/\\\\\\\\'/'/g"                 \
                                          >| "$cwd"/app/Main.hs'""" .!                \
  && 0 == s"""sh -c 'dotarrowAeson $tmp'""" .!                                        \
  && 0 == s"""sh -c 'dotarrowAeson2 $tmp'""" .!                                       \
  then                                                                                \
    Some(s"""sh -c 'cat "$cwd"/app/Main.hs'""" .!!)                                   \
  else                                                                                \
    None                                                                              \
})}

Init(src, ch) = τ /* println(src) */. ch</* Some(src.as[String]) */>.

Main = τ /* s"""sh -c 'cp -r dotarrow/"${args(0)}" "$cwd"'""" .! */.        \
       τ /* s"""sh -c 'cp ../dotarrow/aeson/json.in "$cwd".json'""" .! */.  \
       τ /* s"""sh -c 'touch "$cwd".txt'""" .! */.                          \
       ν(ch) (                                                            \
             ( !.ch(code)/* run */.                                       \
                 if /* 'code.nonEmpty */ = True                           \
                 then τ /* println('code.get) */. ch<code>.               \
                 else ch<>.                                               \
             )                                                            \
             | Init(/* s"""sh -c 'cat "$cwd"/app/Main.hs'""" .!! */, ch)  \
             )
